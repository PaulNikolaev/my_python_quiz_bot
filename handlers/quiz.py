import json
from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import CallbackQuery

from database.db import get_quiz_state, update_quiz_state
from data.quiz_loader import load_quiz_questions

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
QUIZ_QUESTIONS = load_quiz_questions()

router = Router()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Inline-–∫–Ω–æ–ø–æ–∫ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
def generate_options_keyboard(question_index: int, options: list[str]) -> InlineKeyboardBuilder:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."""
    builder = InlineKeyboardBuilder()
    for i, option in enumerate(options):
        # Callback-–¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –∏ –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        callback_data = f"quiz_{question_index}_{i}"
        builder.add(types.InlineKeyboardButton(text=option, callback_data=callback_data))

    # –ö–Ω–æ–ø–∫–∏ –≤—ã–≤–æ–¥–∏–º –ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç–æ–ª–±–∏–∫
    builder.adjust(1)
    return builder.as_markup()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
async def send_question(bot: Bot, chat_id: int, user_id: int, question_index: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –∏ –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤."""
    if question_index >= len(QUIZ_QUESTIONS):
        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–∏–∑
        state = await get_quiz_state(user_id)
        await bot.send_message(
            chat_id=chat_id,
            text=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã. üéâ\n"
                 f"–í–∞—à —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: **{state['score']}** –∏–∑ **{len(QUIZ_QUESTIONS)}**.",
            parse_mode="Markdown"
        )
        return

    question_data = QUIZ_QUESTIONS[question_index]
    options = question_data['options']

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = generate_options_keyboard(question_index, options)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.send_message(
        chat_id=chat_id,
        text=f"**–í–æ–ø—Ä–æ—Å {question_index + 1} –∏–∑ {len(QUIZ_QUESTIONS)}:**\n{question_data['question']}",
        reply_markup=kb,
        parse_mode="Markdown"
    )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ ---

@router.message(F.text == "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
@router.message(Command("quiz"))
async def cmd_quiz(message: types.Message, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–≤–∏–∑, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å.
    """
    if not QUIZ_QUESTIONS:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞.")
        return

    user_id = message.from_user.id

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ 0, —Å—á–µ—Ç 0
    await update_quiz_state(user_id, question_index=0, score=0)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"
    await message.answer(
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∫–≤–∏–∑! –£–¥–∞—á–∏!",
        reply_markup=types.ReplyKeyboardRemove()
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await send_question(bot, message.chat.id, user_id, 0)


@router.callback_query(lambda c: c.data.startswith("quiz_"))
async def process_quiz_answer(callback_query: CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ Inline-–∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤.
    """
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–≤–∏–∑–∞ –∏–∑ –ë–î
    state = await get_quiz_state(user_id)
    if not state:
        await callback_query.answer()
        return

    current_question_index = state['question_index']
    current_score = state['score']

    parts = callback_query.data.split('_')
    user_answer_index = int(parts[2])

    question_data = QUIZ_QUESTIONS[current_question_index]
    correct_answer_index = question_data["correct_option_index"]

    # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
    await callback_query.message.edit_reply_markup(reply_markup=None)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if user_answer_index == correct_answer_index:
        await callback_query.answer()
        new_score = current_score + 1
        await callback_query.message.answer("‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!**", parse_mode="Markdown")
        await update_quiz_state(user_id, current_question_index + 1, new_score)
    else:
        await callback_query.answer()
        correct_answer_text = question_data['options'][correct_answer_index]
        await callback_query.message.answer(
            f"‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.**\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: `{correct_answer_text}`",
            parse_mode="Markdown"
        )
        await update_quiz_state(user_id, current_question_index + 1, current_score)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    next_question_index = current_question_index + 1
    await send_question(bot, callback_query.message.chat.id, user_id, next_question_index)
