from aiogram import Router, types
from aiogram.filters import Command
from database.db import get_top_scores
from datetime import datetime

router = Router()


@router.message(Command("stats"))
async def show_stats(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /stats, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤.
    """
    top_players = await get_top_scores()

    if not top_players:
        await message.answer("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—à—ë–ª –∫–≤–∏–∑. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    stats_message = "**üèÜ –¢–æ–ø-5 –∏–≥—Ä–æ–∫–æ–≤:**\n\n"
    for i, player in enumerate(top_players):
        timestamp_obj = datetime.fromisoformat(player['timestamp'])
        formatted_timestamp = timestamp_obj.strftime("%d.%m.%Y –≤ %H:%M")
        stats_message += (
            f"**{i + 1}.** –ò–≥—Ä–æ–∫: `{player['user_id']}`\n"
            f"   - –†–µ–∑—É–ª—å—Ç–∞—Ç: **{player['score']}** –∏–∑ **{player['total_questions']}**\n"
            f"   - –î–∞—Ç–∞: {formatted_timestamp}\n\n"
        )

    await message.answer(stats_message, parse_mode="Markdown")
